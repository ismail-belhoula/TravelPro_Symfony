{% extends 'basefront.html.twig' %}

{% block title %}Modifier l'avis - TravelPro{% endblock %}

{% block body %}
  <section class="section section-lg bg-default">
    <div class="container">
      <div class="row justify-content-center">
        <div class="col-lg-8">
          <h3 class="text-center">Modifier l'avis</h3>
          <div class="card shadow-sm p-4 mt-4">
            {{ form_start(form, {'attr': {'id': 'avis-form', 'class': 'rd-form rd-mailform'}}) }}

            <div class="form-group">
              <label class="form-label">Note <span class="text-danger">*</span></label>
              <div class="rating-container mb-3">
                <div class="rating-stars">
                  {% for i in 1..5 %}
                    <span class="star" data-value="{{ i }}">
                      <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="{{ form.note.vars.value >= i ? '#ffc107' : '#ddd' }}" stroke="#ffc107" stroke-width="1">
                        <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/>
                      </svg>
                    </span>
                  {% endfor %}
                </div>
                {{ form_widget(form.note, {
                  'attr': {
                    'class': 'rating-value ' ~ (form.note.vars.errors|length > 0 ? 'is-invalid' : '')
                  }
                }) }}
                <div class="invalid-feedback">
                  {{ form_errors(form.note) }}
                </div>
              </div>
            </div>

            <div class="form-group">
              {{ form_label(form.commentaire) }}
              {{ form_widget(form.commentaire) }}
              <div class="invalid-feedback">
                {{ form_errors(form.commentaire) }}
              </div>
            </div>

            <div class="form-group">
              {{ form_label(form.date_publication) }}
              {{ form_widget(form.date_publication) }}
              <div class="invalid-feedback">
                {{ form_errors(form.date_publication) }}
              </div>
            </div>

            <div class="form-group form-check">
              {{ form_widget(form.est_accepte) }}
              {{ form_label(form.est_accepte) }}
              <div class="invalid-feedback">
                {{ form_errors(form.est_accepte) }}
              </div>
            </div>

            <div class="d-flex justify-content-between">
              <button type="submit" class="button button-lg button-primary button-ujarak">Enregistrer</button>
              <a href="{{ path('app_avi_front_show', {'id_avis': avi.idavis}) }}" class="button button-lg button-default-outline button-ujarak">Annuler</a>
            </div>

            {{ form_end(form) }}
          </div>
        </div>
      </div>
    </div>
  </section>

  {% block javascripts %}
    {{ parent() }}
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const stars = document.querySelectorAll('.star');
        const hiddenNoteInput = document.querySelector('.rating-value');

        // Initialisation
        if (hiddenNoteInput.value) {
          updateStars(hiddenNoteInput.value);
        }

        stars.forEach(star => {
          star.addEventListener('click', function () {
            const value = this.getAttribute('data-value');
            hiddenNoteInput.value = value;
            updateStars(value);
          });

          star.addEventListener('mouseover', function () {
            updateStars(this.getAttribute('data-value'), true);
          });

          star.addEventListener('mouseout', function () {
            updateStars(hiddenNoteInput.value || 0);
          });
        });

        function updateStars(value, isHover = false) {
          stars.forEach((s, index) => {
            const starIcon = s.querySelector('svg');
            if (index < value) {
              starIcon.setAttribute('fill', isHover ? '#ffd700' : '#ffc107');
            } else {
              starIcon.setAttribute('fill', '#ddd');
            }
          });
        }
      });
    </script>

    <style>
      .rating-container {
        text-align: center;
      }
      .rating-stars {
        display: inline-flex;
        flex-direction: row;
      }
      .star {
        cursor: pointer;
        margin: 0 5px;
        transition: transform 0.2s;
      }
      .star:hover {
        transform: scale(1.2);
      }
      .rating-stars svg {
        vertical-align: middle;
      }
      .invalid-feedback {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
      }
      .is-invalid ~ .invalid-feedback {
        display: block;
      }
    </style>
  {% endblock %}
{% endblock %}
