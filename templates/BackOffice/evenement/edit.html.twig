{% extends 'backoffice/base.html.twig' %}

{% block title %}Modifier l'événement - {{ evenement.nomEvent }}{% endblock %}

{% block css %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .edit-header {
            border-bottom: 1px solid #e3e6f0;
            padding-bottom: 1rem;
            margin-bottom: 2rem;
        }
        
        .edit-title {
            font-weight: 600;
            color: #4e73df;
        }
        
        .action-buttons {
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid #e3e6f0;
        }
        
        .btn-delete {
            transition: all 0.3s;
        }
        
        .btn-delete:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .current-image-container {
            text-align: center;
            margin-bottom: 1.5rem;
        }
        
        .current-image {
            max-width: 100%;
            max-height: 200px;
            border-radius: 0.35rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.1);
        }
    </style>
{% endblock %}

{% block body %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="edit-header d-flex justify-content-between align-items-center">
                <h1 class="edit-title h3 mb-0">
                    <i class="fas fa-edit me-2"></i>Modifier l'événement
                </h1>
                <a href="{{ path('app_evenement_index') }}" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i> Retour à la liste
                </a>
            </div>
            

            

            {# Formulaire d'édition #}
            {{ include('backoffice/evenement/_form.html.twig', {'button_label': 'Mettre à jour'}) }}

            <div class="action-buttons d-flex justify-content-between align-items-center">
                <a href="{{ path('app_evenement_show', {'id_event': evenement.idEvent}) }}" 
                   class="btn btn-info">
                    <i class="fas fa-eye me-1"></i> Voir les détails
                </a>
                
                {# Formulaire de suppression #}
                <form method="post" action="{{ path('app_evenement_delete', {'id_event': evenement.idEvent}) }}" 
                      onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cet événement ?');">
                    <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ evenement.idEvent) }}">
                    <button class="btn btn-danger btn-delete">
                        <i class="fas fa-trash-alt me-1"></i> Supprimer
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}
{% block js %}
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
   document.addEventListener('DOMContentLoaded', function () {
    let map;
    let marker;

    const modalEl = document.getElementById('mapModal');
    const latitudeInput = document.querySelector('input[name*="[latitude]"]');
    const longitudeInput = document.querySelector('input[name*="[longitude]"]');
    const latText = document.getElementById('current-lat');
    const lonText = document.getElementById('current-lon');

    modalEl.addEventListener('shown.bs.modal', function () {
        if (!map) {
            // Create the map ONLY after modal is visible
            map = L.map('map').setView([36.753, 10.286], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; OpenStreetMap'
            }).addTo(map);

            // Restore marker if inputs already have values
            if (latitudeInput && longitudeInput && latitudeInput.value && longitudeInput.value) {
                const lat = parseFloat(latitudeInput.value);
                const lon = parseFloat(longitudeInput.value);
                marker = L.marker([lat, lon]).addTo(map);
                map.setView([lat, lon], 13);
            }

            map.on('click', function (e) {
                const lat = e.latlng.lat.toFixed(6);
                const lon = e.latlng.lng.toFixed(6);

                if (marker) {
                    marker.remove();
                }

                marker = L.marker([lat, lon]).addTo(map);

                if (latitudeInput && longitudeInput) {
                    latitudeInput.value = lat;
                    longitudeInput.value = lon;
                }
                if (latText) latText.textContent = lat;
                if (lonText) lonText.textContent = lon;
            });
        } else {
            // Refresh map size if already created
            setTimeout(() => {
                map.invalidateSize();
            }, 200);
        }
    });
});


</script>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        // Animation pour le bouton de suppression
        document.querySelector('.btn-delete').addEventListener('mouseover', function() {
            this.innerHTML = '<i class="fas fa-trash-alt me-1"></i> Supprimer définitivement';
        });
        
        document.querySelector('.btn-delete').addEventListener('mouseout', function() {
            this.innerHTML = '<i class="fas fa-trash-alt me-1"></i> Supprimer';
        });
    </script>
{% endblock %}