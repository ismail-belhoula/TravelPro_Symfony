{% extends 'backoffice/base.html.twig' %}
{% block title %}Modifier l'Activité - {{ activite.nomActivite }}{% endblock %}

{% block body %}
<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="display-6 fw-bold text-primary">
            <i class="fas fa-edit me-2"></i>Modifier l'Activité
        </h1>
        <a href="{{ path('app_activite_index') }}" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-1"></i> Retour à la liste
        </a>
    </div>

    <div class="card shadow-sm border-0">
        <div class="card-header bg-white py-3 border-bottom">
            <h5 class="mb-0">Modification de "{{ activite.nomActivite }}"</h5>
        </div>
        
        <div class="card-body">
            {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
            
            <div class="row g-3">
                {# Nom de l'activité #}
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        {{ form_widget(form.nom_activite, {
                            'attr': {
                                'class': 'form-control' ~ (form.nom_activite.vars.valid ? '' : ' is-invalid'),
                                'placeholder': ' '
                            }
                        }) }}
                        {{ form_label(form.nom_activite) }}
                        <div class="invalid-feedback">
                            {{ form_errors(form.nom_activite) }}
                        </div>
                    </div>
                </div>
                
                {# Événement associé #}
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        {{ form_widget(form.evenement, {
                            'attr': {
                                'class': 'form-select' ~ (form.evenement.vars.valid ? '' : ' is-invalid'),
                                'placeholder': ' '
                            }
                        }) }}
                        {{ form_label(form.evenement) }}
                        <div class="invalid-feedback">
                            {{ form_errors(form.evenement) }}
                        </div>
                    </div>
                </div>
                
                {# Description #}
                <div class="col-12">
                    <div class="form-floating mb-3">
                        {{ form_widget(form.description, {
                            'attr': {
                                'class': 'form-control' ~ (form.description.vars.valid ? '' : ' is-invalid'),
                                'placeholder': ' ',
                                'style': 'height: 100px'
                            }
                        }) }}
                        {{ form_label(form.description) }}
                        <div class="invalid-feedback">
                            {{ form_errors(form.description) }}
                        </div>
                    </div>
                </div>
                
                {# Dates #}
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        {{ form_widget(form.date_debut, {
                            'attr': {
                                'class': 'form-control' ~ (form.date_debut.vars.valid ? '' : ' is-invalid'),
                                'placeholder': ' '
                            }
                        }) }}
                        {{ form_label(form.date_debut) }}
                        <div class="invalid-feedback">
                            {{ form_errors(form.date_debut) }}
                        </div>
                        <small class="text-muted">La date doit être aujourd'hui ou dans le futur</small>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        {{ form_widget(form.date_fin, {
                            'attr': {
                                'class': 'form-control' ~ (form.date_fin.vars.valid ? '' : ' is-invalid'),
                                'placeholder': ' '
                            }
                        }) }}
                        {{ form_label(form.date_fin) }}
                        <div class="invalid-feedback">
                            {{ form_errors(form.date_fin) }}
                        </div>
                        <small class="text-muted">Doit être après la date de début</small>
                    </div>
                </div>
            </div>
            
            <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                <button type="submit" class="btn btn-primary rounded-pill px-4">
                    <i class="fas fa-save me-2"></i>Enregistrer les modifications
                </button>
                <a href="{{ path('app_activite_index') }}" class="btn btn-outline-secondary rounded-pill px-4">
                    Annuler
                </a>
            </div>
            
            {{ form_end(form) }}
        </div>
    </div>
</div>
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    .card {
        border-radius: 0.75rem;
    }
    .form-floating>label {
        padding: 0.5rem 0.75rem;
    }
    .form-control:focus, .form-select:focus {
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
    }
    .is-invalid {
        border-color: #dc3545;
    }
    .is-invalid:focus {
        box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.15);
    }
    .invalid-feedback {
        display: block;
    }
</style>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Validation côté client
    const forms = document.querySelectorAll('.needs-validation');
    
    Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
            }
            
            form.classList.add('was-validated');
        }, false);
    });
    
    // Validation des dates en temps réel
    const dateDebut = document.getElementById('{{ form.date_debut.vars.id }}');
    const dateFin = document.getElementById('{{ form.date_fin.vars.id }}');
    
    if (dateDebut && dateFin) {
        dateDebut.addEventListener('change', validateDates);
        dateFin.addEventListener('change', validateDates);
    }
    
    function validateDates() {
        if (dateDebut.value && dateFin.value) {
            const debut = new Date(dateDebut.value);
            const fin = new Date(dateFin.value);
            
            if (fin < debut) {
                dateFin.setCustomValidity("La date de fin doit être après la date de début");
                dateFin.classList.add('is-invalid');
            } else {
                dateFin.setCustomValidity("");
                dateFin.classList.remove('is-invalid');
            }
        }
    }
});
</script>
{% endblock %}